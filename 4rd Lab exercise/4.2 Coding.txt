----------------------------------------------2o----------------------------------------------
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#define ped 10
#define SW5_PIN  PIN5_bm
#define SW6_PIN  PIN6_bm
#define MAX_TRIES 3
int x=0;
int numTries = 0;
int z=0;
int y=0;
int t=0;




int main() {


	while (1) {
		 PORTF.DIRCLR = SW5_PIN | SW6_PIN;
		 PORTF.PIN5CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
		 PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
		 sei();
		 
		
			
			 
			 //PORTD.OUTCLR= PIN1_bm; //LED1 is on
			 //(σελ 219, 224, 205) 16-bit counter high and low
			 TCA0.SINGLE.CNT = 0; //clear counter
			 //Normal Mode (TCA_SINGLE_WGMODE_NORMAL_gc σελ 207)
			 TCA0.SINGLE.CTRLB = 0;
			 //When CMP0 reaches this value -> interrupt //CLOCK FREQUENCY/1024
			 TCA0.SINGLE.CMP0 = ped;
			 TCA0.SINGLE.CTRLA = 0x7<<1; //TCA_SINGLE_CLKSEL_DIV1024_gc σελ 224
			 //TCA0.SINGLE.CTRLA |=1;//Enable
			 TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm; //Interrupt Enable (=0x10)
			 sei(); //begin accepting interrupt signals
			 
			 PORTD.DIR |= PIN0_bm; //PIN is output
             //initialize the ADC for Free-Running mode
             ADC0.CTRLA |= ADC_RESSEL_10BIT_gc; //10-bit resolution
             ADC0.CTRLA |= ADC_FREERUN_bm; //Free-Running mode enabled
            // ADC0.CTRLA |= ADC_ENABLE_bm; //Enable ADC
             ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc; //The bit //Enable Debug Mode
             ADC0.DBGCTRL |= ADC_DBGRUN_bm; //Window Comparator Mode
             ADC0.WINLT |= 10; //Set threshold
            //ADC0.INTCTRL |= ADC_WCMP_bm; //Enable Interrupts for WCM
             ADC0.CTRLE |= ADC_WINCM0_bm; //Interrupt when RESULT < WINLT
             sei();
             ADC0.COMMAND |= ADC_STCONV_bm; //Start Conversion

			 
			 if (   ((numTries >= MAX_TRIES) && (z==1) ) || (y==1)  )
			 {
				PORTD.DIR |= PIN0_bm; //PIN0 is output
				//prescaler=1024
				TCA0.SINGLE.CTRLA=TCA_SINGLE_CLKSEL_DIV1024_gc;
				TCA0.SINGLE.PER = 254; //select the resolution
				TCA0.SINGLE.CMP0 = 127; //select the duty cycle
				//select Single_Slope_PWM
				TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
				//enable interrupt Overflow
				TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;
				//enable interrupt COMP0
				TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;
				TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm; //Enable
				sei()
				z=0;
				y=0;
				t=1;
				
		
			
		 
		 }
	 return 0;
	 }
		
		 
	

	

ISR(TCA0_CMP0_vect){
	TCA0.SINGLE.CTRLA = 0; //Disable
	//clear flag
	int intflags = TCA0.SINGLE.INTFLAGS;
	TCA0.SINGLE.INTFLAGS=intflags;
	
	ADC0.CTRLA |= ADC_ENABLE_bm; //Enable ADC
	PORTD.OUTCLR |= PIN0_bm; //LED0 is ON
	
	if(z==1){
		y=1;
	}
	
}
ISR(PORTF_PORT_vect){
	int intflags = PORTF.INTFLAGS;
	
	if (((PORTF.INTFLAGS == 0b00100000) == 1) && (x==0))
	{
		x=1;
	}
	
	else if (((PORTF.INTFLAGS == 0b01000000) == 1) && (x==1))
	{
		x=2;
	}
	else if (((PORTF.INTFLAGS == 0b00100000) == 1) && (x==2))
	{
		x=3;
	}
	else if (((PORTF.INTFLAGS == 0b01000000) == 1) && (x==3))
	{
		x=0;
		numTries=0;
		TCA0.SINGLE.CTRLA |=1;//Enable
		  if( z==1 ){
			 ADC0.CTRLA &= ~(ADC_ENABLE_bm);//disable ADC
			 PORTD.OUT |= PIN0_bm; //LED0 is off
			 TCA0.SINGLE.CTRLA &= ~(TCA_SINGLE_ENABLE_bm); //disable timer
			 

			 x=0;
			 y=0;
			 z=0;
		 }
		 else if(t==1){
			  ADC0.CTRLA &= ~(ADC_ENABLE_bm);//disable ADC
			  PORTD.OUT |= PIN0_bm; //LED0 is off
			  TCA0.SINGLE.CTRLA &= ~(TCA_SINGLE_ENABLE_bm); //disable timer
			  x=0;
			  y=0;
			  z=0;
			  
		 }
	}
	else{ numTries++;
	  x=0;
	}
	
	int z = PORTF.INTFLAGS;
	PORTF.INTFLAGS=z;

	
}
ISR(ADC0_WCOMP_vect){
int intflags = ADC0.INTFLAGS;
ADC0.INTFLAGS = intflags;


TCA0.SINGLE.CTRLA |=1;//Enable
z=1;


}


ISR(TCA0_OVF_vect){
	//clear the interrupt flag
	int intflags =
	TCA0.SINGLE.INTFLAGS;
	TCA0.SINGLE.INTFLAGS = intflags;
	PORTD.OUTCLR= PIN0_bm; //LED0 is on
}

ISR(TCA0_CMP0_vect){
	//clear the interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
	TCA0.SINGLE.INTFLAGS = intflags;
	PORTD.OUT |= PIN0_bm; //PIN0 is off
}

